@page "/admin/addmovie"
@using MovieWebsite.Models
@layout AdminLayout
@inject IMovieRepository MovieRepository
@inject IGenreRepository GenreRepository
@inject ICategoryRepository CategoryRepository
@inject ICountryRepository CountryRepository
@inject NavigationManager NavigationManager

<h3>Thêm Phim Mới</h3>

<EditForm Model="@newMovie" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="title">Tiêu đề</label>
        <InputText id="title" @bind-Value="newMovie.Title" />
        <ValidationMessage For="@(() => newMovie.Title)" />
    </div>

    <div>
        <label for="description">Mô tả</label>
        <InputTextArea id="description" @bind-Value="newMovie.Description" />
    </div>

    <div>
        <label for="duration">Thời gian (phút)</label>
        <InputNumber id="duration" @bind-Value="newMovie.Duration" />
        <ValidationMessage For="@(() => newMovie.Duration)" />
    </div>

    <div>
        <label for="releaseDate">Ngày phát hành</label>
        <InputDate id="releaseDate" @bind-Value="newMovie.ReleaseDate" />
        <ValidationMessage For="@(() => newMovie.ReleaseDate)" />
    </div>

    <div>
        <label for="director">Đạo diễn</label>
        <InputText id="director" @bind-Value="newMovie.Director" />
        <ValidationMessage For="@(() => newMovie.Director)" />
    </div>

    <div>
        <label for="cast">Diễn viên</label>
        <InputText id="cast" @bind-Value="newMovie.Cast" />
    </div>

    <div>
        <label for="posterURL">URL Áo</label>
        <InputText id="posterURL" @bind-Value="newMovie.PosterURL" />
    </div>

    <div>
        <label for="videoURL">URL Video</label>
        <InputText id="videoURL" @bind-Value="newMovie.VideoURL" />
    </div>

    <div>
        <label for="country">Quốc gia</label>
        <InputSelect id="country" @bind-Value="newMovie.CountryID">
            <option value="">-- Chọn quốc gia --</option>
            @foreach (var country in countries)
            {
                <option value="@country.CountryID">@country.CountryName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newMovie.CountryID)" />
    </div>

    <div>
        <label>Danh mục</label>
        @foreach (var category in categories)
        {
            <div>
                <input type="checkbox" @onchange="e => ToggleCategorySelection(category.CategoryID, ((ChangeEventArgs)e).Value)" />
                <label for="@category.CategoryID">@category.CategoryName</label>
            </div>
        }
    </div>

    <div>
        <label>Thể loại</label>
        @foreach (var genre in genres)
        {
            <div>
                <input type="checkbox" @onchange="e => ToggleGenreSelection(genre.GenreID, ((ChangeEventArgs)e).Value)" />
                <label for="@genre.GenreID">@genre.GenreName</label>
            </div>
        }
    </div>

    <button type="submit">Thêm Phim</button>
</EditForm>

@code {
    private AddMovieViewModel newMovie = new AddMovieViewModel();
    private List<Genre> genres = new List<Genre>();
    private List<Category> categories = new List<Category>();
    private List<Country> countries = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        genres = (await GenreRepository.GetAllGenresAsync()).ToList();
        categories = (await CategoryRepository.GetAllCategoriesAsync()).ToList();
        countries = (await CountryRepository.GetAllCountriesAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var movie = new Movie
            {
                Title = newMovie.Title,
                Description = newMovie.Description,
                Duration = newMovie.Duration,
                ReleaseDate = newMovie.ReleaseDate,
                Director = newMovie.Director,
                Cast = newMovie.Cast,
                PosterURL = newMovie.PosterURL,
                VideoURL = newMovie.VideoURL,
                CountryID = newMovie.CountryID,
                MovieGenres = newMovie.SelectedGenreIDs.Select(g => new MovieGenre { GenreID = g }).ToList(),
                MovieCategories = newMovie.SelectedCategoryIDs.Select(c => new MovieCategory { CategoryID = c }).ToList()
            };

            await MovieRepository.AddMovieAsync(movie);
            NavigationManager.NavigateTo("/admin/movies");
        }
        catch (Exception ex)
        {
            // Xử lý lỗi (hiển thị hoặc log)
            Console.WriteLine($"Lỗi khi thêm phim: {ex.Message}");
        }
    }

    private void ToggleGenreSelection(long genreId, object checkedValue)
    {
        var isChecked = (bool)checkedValue;

        if (isChecked)
        {
            if (!newMovie.SelectedGenreIDs.Contains(genreId))
            {
                newMovie.SelectedGenreIDs.Add(genreId);
            }
        }
        else
        {
            if (newMovie.SelectedGenreIDs.Contains(genreId))
            {
                newMovie.SelectedGenreIDs.Remove(genreId);
            }
        }
    }

    private void ToggleCategorySelection(long categoryId, object checkedValue)
    {
        var isChecked = (bool)checkedValue;

        if (isChecked)
        {
            if (!newMovie.SelectedCategoryIDs.Contains(categoryId))
            {
                newMovie.SelectedCategoryIDs.Add(categoryId);
            }
        }
        else
        {
            if (newMovie.SelectedCategoryIDs.Contains(categoryId))
            {
                newMovie.SelectedCategoryIDs.Remove(categoryId);
            }
        }
    }
}
