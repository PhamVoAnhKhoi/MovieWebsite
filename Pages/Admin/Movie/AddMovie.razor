@page "/admin/addmovie"
@using MovieWebsite.Models
@layout AdminLayout
@inject IMovieRepository MovieRepository
@inject IGenreRepository GenreRepository
@inject ICategoryRepository CategoryRepository
@inject ICountryRepository CountryRepository
@inject NavigationManager NavigationManager

<h3 class="text-center my-4">Thêm Phim Mới</h3>

<EditForm Model="@newMovie" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="container">
        <div class="row g-3">
            <div class="col-md-6">
                <label for="title" class="form-label">Tên phim</label>
                <InputText id="title" class="form-control" @bind-Value="newMovie.Title" />
                <ValidationMessage For="@(() => newMovie.Title)" class="text-danger" />
            </div>

            <div class="col-md-6">
                <label for="country" class="form-label">Quốc gia</label>
                <InputSelect id="country" class="form-select" @bind-Value="newMovie.CountryID">
                    <option value="">-- Chọn quốc gia --</option>
                    @foreach (var country in countries)
                    {
                        <option value="@country.CountryID">@country.CountryName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newMovie.CountryID)" class="text-danger" />
            </div>

            <div class="col-md-12">
                <label for="description" class="form-label">Mô tả</label>
                <InputTextArea id="description" class="form-control" @bind-Value="newMovie.Description" />
            </div>

            <div class="col-md-6">
                <label for="duration" class="form-label">Thời gian (phút)</label>
                <InputNumber id="duration" class="form-control" @bind-Value="newMovie.Duration" />
                <ValidationMessage For="@(() => newMovie.Duration)" class="text-danger" />
            </div>

            <div class="col-md-6">
                <label for="releaseDate" class="form-label">Ngày phát hành</label>
                <InputDate id="releaseDate" class="form-control" @bind-Value="newMovie.ReleaseDate" />
                <ValidationMessage For="@(() => newMovie.ReleaseDate)" class="text-danger" />
            </div>

            <div class="col-md-6">
                <label for="director" class="form-label">Đạo diễn</label>
                <InputText id="director" class="form-control" @bind-Value="newMovie.Director" />
                <ValidationMessage For="@(() => newMovie.Director)" class="text-danger" />
            </div>

            <div class="col-md-6">
                <label for="cast" class="form-label">Diễn viên</label>
                <InputText id="cast" class="form-control" @bind-Value="newMovie.Cast" />
            </div>

            <div class="col-md-6">
                <label for="posterURL" class="form-label">URL Poster</label>
                <InputFile id="posterURL" class="form-control" OnChange="HandlePosterUpload" />
            </div>

            @* <div class="col-md-6">
                <label for="videoURL" class="form-label">URL Video</label>
                <InputFile id="videoURL" class="form-control" OnChange="HandleVideoUpload" />
            </div> *@

            <div class="col-md-6">
                <label for="videoURL" class="form-label">URL Video</label>
                <InputText id="videoURL" class="form-control" @bind-Value="newMovie.VideoURL" />
            </div>

            <div class="col-md-12">
                <label class="form-label">Danh mục</label>
                @foreach (var category in categories)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @onchange="e => ToggleCategorySelection(category.CategoryID, ((ChangeEventArgs)e).Value)" />
                        <label class="form-check-label" for="@category.CategoryID">@category.CategoryName</label>
                        <ValidationMessage For="@(() => newMovie.VideoURL)" class="text-danger" />
                    </div>
                }
            </div>

            <div class="col-md-12">
                <label class="form-label">Thể loại</label>
                @foreach (var genre in genres)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @onchange="e => ToggleGenreSelection(genre.GenreID, ((ChangeEventArgs)e).Value)" />
                        <label class="form-check-label" for="@genre.GenreID">@genre.GenreName</label>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="text-center">
        <button type="submit" class="btn btn-primary w-25">Thêm Phim</button>          
        <a href="javascript:history.back()" class="btn btn-secondary w-25">Quay lại</a>
    </div>
</EditForm>

@code {
    private Movie newMovie = new Movie();
    private List<long> selectedGenreIDs = new List<long>();
    private List<long> selectedCategoryIDs = new List<long>();
    private List<Genre> genres = new List<Genre>();
    private List<Category> categories = new List<Category>();
    private List<Country> countries = new List<Country>();
    private IBrowserFile uploadedVideo;
    private IBrowserFile uploadedPoster;

    protected override async Task OnInitializedAsync()
    {
        genres = (await GenreRepository.GetAllGenresAsync()).ToList();
        categories = (await CategoryRepository.GetAllCategoriesAsync()).ToList();
        countries = (await CountryRepository.GetAllCountriesAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            @* if (uploadedVideo != null)
            {
                // Lưu video lên server
                var videoUrl = await SaveVideoToFile(uploadedVideo);
                newMovie.VideoURL = videoUrl; // Gán URL video
            } *@
            if (uploadedPoster != null)
            {
                // Lưu poster lên server
                var posterURL = await SavePosterToFile(uploadedPoster);
                newMovie.PosterURL = posterURL; // Gán URL poster
            }

            newMovie.MovieGenres = selectedGenreIDs.Select(g => new MovieGenre { GenreID = g }).ToList();
            newMovie.MovieCategories = selectedCategoryIDs.Select(c => new MovieCategory { CategoryID = c }).ToList();

            await MovieRepository.AddMovieAsync(newMovie);
            NavigationManager.NavigateTo("/admin/movies");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi thêm phim: {ex.Message}");
        }
    }

    @* private async Task HandleVideoUpload(InputFileChangeEventArgs e)
    {
        uploadedVideo = e.File; // Lưu video đã upload
    } *@

    private async Task HandlePosterUpload(InputFileChangeEventArgs e)
    {
        uploadedPoster = e.File; // Lưu poster đã upload
    }

    @* private async Task<string> SaveVideoToFile(IBrowserFile videoFile)
    {
        var fileName = $"{Guid.NewGuid()}_{videoFile.Name}";
        var directoryPath = Path.Combine("wwwroot/videos");
        
        // Kiểm tra nếu thư mục tồn tại, nếu không thì tạo
        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        var filePath = Path.Combine(directoryPath, fileName); // Đường dẫn nơi bạn lưu video
        
        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await videoFile.OpenReadStream().CopyToAsync(stream); // Lưu video vào file
        }

        return $"/videos/{fileName}"; // Trả về URL video
    } *@

    private async Task<string> SavePosterToFile(IBrowserFile posterFile)
    {
        var fileName = $"{Guid.NewGuid()}_{posterFile.Name}";
        var directoryPath = Path.Combine("wwwroot/posters");
        
        // Kiểm tra nếu thư mục tồn tại, nếu không thì tạo
        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        var filePath = Path.Combine(directoryPath, fileName); // Đường dẫn nơi bạn lưu poster
        
        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await posterFile.OpenReadStream().CopyToAsync(stream); // Lưu poster vào file
        }

        return $"/posters/{fileName}"; // Trả về URL poster
    }

    private void ToggleGenreSelection(long genreId, object checkedValue)
    {
        var isChecked = (bool)checkedValue;

        if (isChecked)
        {
            if (!selectedGenreIDs.Contains(genreId))
            {
                selectedGenreIDs.Add(genreId);
            }
        }
        else
        {
            if (selectedGenreIDs.Contains(genreId))
            {
                selectedGenreIDs.Remove(genreId);
            }
        }
    }

    private void ToggleCategorySelection(long categoryId, object checkedValue)
    {
        var isChecked = (bool)checkedValue;

        if (isChecked)
        {
            if (!selectedCategoryIDs.Contains(categoryId))
            {
                selectedCategoryIDs.Add(categoryId);
            }
        }
        else
        {
            if (selectedCategoryIDs.Contains(categoryId))
            {
                selectedCategoryIDs.Remove(categoryId);
            }
        }
    }
}
