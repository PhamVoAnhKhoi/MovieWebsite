@page "/admin/movies"
@layout AdminLayout
@using MovieWebsite.Models
@inject IMovieReference MovieReference

<h3>Quản lý Phim</h3>

@if (movies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <!-- Dropdown lọc theo chữ cái đầu -->
        <div class="mb-3">
            <select @onchange="FilterMoviesByLetter" class="form-select w-25">
                <option value="">-- Chọn chữ cái đầu --</option>
                @foreach (var letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                {
                    <option value="@letter">@letter</option>
                }
            </select>
        </div>

        <a class="btn btn-success mb-3" href="/admin/addmovie">Thêm Phim Mới</a>
        <ul class="list-group">
            @foreach (var movie in movies)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>
                        <img src="@movie.PosterURL" alt="@movie.Title" width="50" />
                        @movie.Title (@movie.ReleaseDate)
                    </span>
                    <span>
                        <a class="btn btn-primary btn-sm" href="/admin/editmovie/@movie.MovieID">Chỉnh Sửa</a>
                        <button class="btn btn-danger btn-sm" @onclick="()=> HandleDeleteMovie(movie.MovieID)">Xóa</button>
                    </span>
                </li>
            }
        </ul>
    </div>
}

@code {
    private IEnumerable<Movie> movies;
    private IEnumerable<Movie> allMovies; // Tất cả phim để sử dụng lại sau khi lọc
    private string selectedLetter;

    protected override async Task OnInitializedAsync()
    {
        allMovies = await MovieReference.GetAllMoviesAsync();
        movies = allMovies; // Ban đầu hiển thị tất cả phim
    }

    private void FilterMoviesByLetter(ChangeEventArgs e)
    {
        selectedLetter = e.Value?.ToString();

        if (!string.IsNullOrEmpty(selectedLetter))
        {
            // Lọc phim theo chữ cái đầu của tiêu đề
            movies = allMovies.Where(m => m.Title.StartsWith(selectedLetter, StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            movies = allMovies; // Hiển thị tất cả phim nếu không có chữ cái nào được chọn
        }
    }

    private async Task HandleDeleteMovie(long? movieId)
    {
        if (movieId.HasValue)
        {
            await MovieReference.DeleteMovieAsync(movieId);
            allMovies = await MovieReference.GetAllMoviesAsync(); // Refresh list
            movies = allMovies; // Reset the displayed list
        }
    }
}
