@page "/admin/category"
@using MovieWebsite.Models
@inject ICategoryReference CategoryReference

<h3>Quản lý Thể Loại Phim</h3>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <!-- Dropdown Filter by Alphabet -->
        <div class="mb-3">
            <select @onchange="FilterCategoriesByLetter" class="form-select w-25">
                <option value="">-- Chọn chữ cái --</option>
                @foreach (var letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                {
                    <option value="@letter">@letter</option>
                }
            </select>
        </div>

        <form @onsubmit="HandleAddCategory">
            <div class="input-group mb-3">
                <input type="text" @bind="newCategoryName" class="form-control" placeholder="Thêm thể loại mới">
                <button class="btn btn-primary" type="submit">Thêm</button>
            </div>
        </form>

        <ul class="list-group">
            @foreach (var category in categories)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @category.Name
                    <button class="btn btn-danger btn-sm" @onclick="() => HandleDeleteCategory(category.CategoryId)">Xóa</button>
                    <a class="btn btn-primary" href="/admin/editcategory/@category.CategoryId">Edit</a>
                </li>
            }
        </ul>
    </div>
}

@code {
    private IEnumerable<Category> categories;
    private IEnumerable<Category> allCategories; // Tất cả thể loại để sử dụng lại sau khi lọc
    private string newCategoryName;

    protected override async Task OnInitializedAsync()
    {
        allCategories = await CategoryReference.GetAllCategoriesAsync();
        categories = allCategories; // Ban đầu hiển thị tất cả thể loại
    }

    private async Task HandleAddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            var newCategory = new Category { Name = newCategoryName };
            await CategoryReference.AddCategoryAsync(newCategory);
            allCategories = await CategoryReference.GetAllCategoriesAsync(); // Refresh all categories
            categories = allCategories; // Reset the displayed list
            newCategoryName = string.Empty; // Clear input
        }
    }

    private async Task HandleDeleteCategory(long? id)
    {
        if (id.HasValue)
        {
            await CategoryReference.DeleteCategoryAsync(id.Value);
            allCategories = await CategoryReference.GetAllCategoriesAsync(); // Refresh all categories
            categories = allCategories; // Reset the displayed list
        }
    }

    private void FilterCategoriesByLetter(ChangeEventArgs e)
    {
        var selectedLetter = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedLetter))
        {
            categories = allCategories.Where(c => c.Name.StartsWith(selectedLetter, StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            categories = allCategories; // Hiển thị tất cả thể loại nếu không có chữ cái nào được chọn
        }
    }
}
